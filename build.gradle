apply plugin : 'cpp'
apply plugin : 'c'
apply plugin : 'visual-studio'


model {
	toolChains {
        visualCpp(VisualCpp) {
            
        }
        
		gcc(Gcc){
			target 'ubun'
		}
        
        clang(Clang) {
		    target "Macx64"
	    }
	}
	platforms{
	    windows_x86 {
            architecture "i386"
            operatingSystem "windows"
        }
        windows_x64 {
            architecture "x86_64"
            operatingSystem "windows"
        }
        ubun{
            architecture 'x86_64'
            operatingSystem 'linux'
        }
	    Macx64 {
	        architecture 'x86_64'
	        operatingSystem 'darwin'
        }
    }
    
	buildTypes{
		debug
		release
	}
    
	repositories {
		libs(PrebuiltLibraries){
            opus{
                binaries.withType(StaticLibraryBinary) {
                    if(targetPlatform == platforms.windows_x86) {
                        staticLibraryFile = file('lib/windows/x86/opus.lib')
                    } else if (targetPlatform == platforms.windows_x64) {
                        staticLibraryFile = file('lib/windows/x64/opus.lib')
                    } else if (targetPlatform == platforms.ubun) {
                        staticLibraryFile = file('lib/ubunos/libopus.a.1.2.1')
                    } else if (targetPlatform == platforms.Macx64) {
                            staticLibraryFile = file('lib/macos/libopus.a')
                    }
                }
            }   
        }  
	}
    
	components{
		VoIPCodec(NativeExecutableSpec){
            def os = org.gradle.internal.os.OperatingSystem.current()
            if(os.isWindows()) {
                targetPlatform "windows_x86"
                targetPlatform "windows_x64"
            } else if (os.isLinux()) {
                targetPlatform "ubun"
            } else if (os.isMacOsX()) {
                targetPlatform "Macx64"
            }

            sources {
				cpp{
					source{
						srcDir "src"
						include "*.cpp"
					}
					exportedHeaders{
						srcDir "inc"
			            srcDir "scr"
			            srcDir "inc/opus"
					}
				}
			}
			
			binaries.all{
				cppCompiler.define 'DEBUG_O'
			   
				if (toolChain in Gcc && buildType == buildTypes.debug){
                    cppCompiler.args '-ggdb','-Werror','-g','-O0'
                    linker.args '-lstdc++'
				}
                
                if (toolChain in VisualCpp ) {
                    cppCompiler.args "/EHsc", "/ZI","/Od","/MDd"
                    
                    if( buildType == buildTypes.debug ) {   
                        linker.args "/DEBUG"
                    }
                    
                    linker.args "/NODEFAULTLIB:LIBCMTD.lib"
                }

                lib library:'opus', linkage: 'static'
			}
			
		}
	}
}